import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

class Solution {
	public static class Info implements Comparable<Info> {
		int index;
		int count;
		
		public Info(int index, int count) {
			this.index = index;
			this.count = count;
		}
		void addCount(int count) {
			this.count += count;
		}
		@Override
	    public int compareTo(Info o) {
			if(o.count == count) {
				return index - o.index;
			} else return o.count - count;
	    }
	}
	
	public static int[] solution(String[] genres, int[] plays) {
				ArrayList<Integer> answerList = new ArrayList();
		int size = genres.length;
		ArrayList<Info>[] list = new ArrayList[size];
		Info[] sumCount = new Info[size];
		int index = 0;
		
		for(int i=0; i<size;i++) {
			list[i] = new ArrayList<Info>();
			sumCount[i] = new Info(-1,-1);
		}
		
		HashMap<String, Integer> genresHashMap = new HashMap();
	
		for(int i=0; i<genres.length; i++) {
			if(genresHashMap.get(genres[i]) == null) {
				genresHashMap.put(genres[i], index);
				sumCount[index] = new Info(index, plays[i]);
				list[index].add(new Info(i, plays[i]));
				index++;
			} else {
				list[genresHashMap.get(genres[i])].add(new Info(i, plays[i]));
				sumCount[genresHashMap.get(genres[i])].addCount(plays[i]);
			}
		}
		
		Arrays.sort(sumCount, new Comparator<Info>() {
			@Override
			public int compare(Info i1, Info i2) {
				return i2.count - i1.count;
			}
		});
		
		int answerIndex = 0;
		for(int i=0; i<index; i++) {
			System.out.println(sumCount[i].index + " " + sumCount[i].count);
			int tempIndex = sumCount[i].index;
			Collections.sort(list[tempIndex]);
			int j=0;
			for(Info tempInfo : list[tempIndex]) {
				if(j>=2) break;
				answerList.add(tempInfo.index);
				System.out.println(tempInfo.index);	
				j++;
			}
		}
		int[] answer = new int[answerList.size()];
		for(int i=0; i<answerList.size(); i++) {
			answer[i] = answerList.get(i);
		}
		return answer;
	}
}
