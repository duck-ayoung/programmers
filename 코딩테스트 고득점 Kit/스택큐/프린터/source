import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int solution(int[] priorities, int location) {
      int answer = priorities.length;
      Queue<Integer> queue = new LinkedList<Integer>();
      Integer[] newPriorities = Arrays.stream(priorities).boxed().toArray(Integer[]::new);
      Arrays.sort(newPriorities, Collections.reverseOrder());

      for (int i = 0; i < priorities.length; i++) {
        queue.add(i);
      }
      int nowIndex = 0;
      while (!queue.isEmpty()) {
        if (priorities[queue.peek()] == newPriorities[nowIndex]) {
          if (location == queue.peek()) {
            return nowIndex + 1;
          }
          queue.poll();
          nowIndex++;
        } else
          queue.add(queue.poll());
      }
      return answer;
	}
}
