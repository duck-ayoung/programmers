import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

class Solution {
public static class Job implements Comparable<Job>{
		int start_time;
		int task_time;
		public Job(int start_time, int task_time) {
			super();
			this.start_time = start_time;
			this.task_time = task_time;
		}
		@Override
		public int compareTo(Job target) {
            if(this.task_time == target.task_time) {
                return target.start_time-this.start_time;
            } 
            else
                return this.task_time > target.task_time ? 1:-1;
		}
		@Override
		public String toString() {
			return "Job [start_time=" + start_time + ", task_time=" + task_time + "]";
		}
		
		
	}
	public static int solution(int[][] jobs) {
        int answer = 0;
        boolean now_run = false;
        int end_time = 0;
        int sum =0;
        PriorityQueue<Job> heap = new PriorityQueue<>();
        
                Arrays.sort(jobs, new Comparator<int[]>() {
        	@Override
        	public int compare(int[] o1, int[]o2) {
                if(o1[0] == o2[0]) {
                    return o1[1] - o2[1];
                }
                else 
                    return o1[0] - o2[0];
        	}
		});

        for(int i=0; i<jobs.length; i++) {
        	if(!now_run) {
        		end_time += jobs[i][0]+jobs[i][1];
        		sum += jobs[i][1];
        		now_run = true;
        	}
        	else if(end_time >= jobs[i][0]) {
        		heap.add(new Job(jobs[i][0], jobs[i][1]));
        	}
        	else if(heap.isEmpty()) {
        		end_time = jobs[i][0]+jobs[i][1];
        		sum += jobs[i][1];
        	}
        	else {
        		i--;
        		Job temp = heap.poll();
        		sum += end_time - temp.start_time + temp.task_time;
        		end_time += temp.task_time;

        	}
        }
        
        while(!heap.isEmpty()) {
    		Job temp = heap.poll();
    		sum += end_time - temp.start_time + temp.task_time;
    		end_time += temp.task_time;
    		
        }
        return sum/jobs.length;
    }
}
