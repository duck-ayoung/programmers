class Solution {
 	static int[] dx = { 1, 0, -1, 0 };
	static int[] dy = { 0, 1, 0, -1 };
	static int[][] arr = new int[100][100];
	public static int rotate_arr(int[] querie) {
		
		int direction_index = 0;
		int starty = querie[0] - 1;
		int startx = querie[1] - 1;
		int now = arr[starty][startx];
		int min = now;
		int nowx = startx;
		int nowy = starty;
		while (true) {
			if ((nowx == querie[3] - 1 && nowy == querie[0] - 1) || (nowx == querie[3] - 1 && nowy == querie[2] - 1)
					|| (nowx == querie[1] - 1 && nowy == querie[2] - 1)) {
				direction_index++;
			}

			int nextx = nowx + dx[direction_index];
			int nexty = nowy + dy[direction_index];

			int next = arr[nexty][nextx];
			arr[nexty][nextx] = now;

			if (min > next) 
				min = next;
			now = next;
			nowx = nextx;
			nowy = nexty;
			if (nextx == startx && nexty == starty) {
				break;
			}
		}
		return min;
	}
	
	public static int[] solution(int rows, int columns, int[][] queries) {
		int[] answer = new int[queries.length];
		int count = 1;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				arr[i][j] = count++;
			}
		}
		for (int i = 0; i < queries.length; i++) {
			answer[i] = rotate_arr(queries[i]);
		}
		
		return answer;
	}



}
